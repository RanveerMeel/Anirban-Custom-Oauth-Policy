<?xml version="1.0" encoding="UTF-8"?>
<policy xmlns="http://www.mulesoft.org/schema/mule/policy"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:spring="http://www.springframework.org/schema/beans"
        xmlns:mule="http://www.mulesoft.org/schema/mule/core"
        xmlns:mule-ss="http://www.mulesoft.org/schema/mule/spring-security"
        xmlns:ss="http://www.springframework.org/schema/security"
        xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
        xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw"
        xsi:schemaLocation="http://www.mulesoft.org/schema/mule/policy http://www.mulesoft.org/schema/mule/policy/current/mule-policy.xsd
              http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
              http://www.mulesoft.org/schema/mule/spring-security http://www.mulesoft.org/schema/mule/spring-security/current/mule-spring-security.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-current.xsd
              http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
              http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd
              http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd" id="{{policyId}}" policyName="Anirban-Oauth-Policy">
   
  <!--   <pointcut>
          <api-platform-gw:api-pointcut apiName="{{ apiName }}" apiVersion="{{ apiVersionName }}"/>
    </pointcut> -->
  
  <!-- Author: Anirban Sen Chowdhary. Incase of any issue, please report it here : https://github.com/anirban37/Anirban-Custom-Oauth-Policy/issues -->                       
          
    <before>
        <mule:set-variable variableName="validationUrl" value="{{ validationUrl }}" />
        <mule:set-variable variableName="clientId" value="{{ clientId }}" />
        <mule:logger message="url: #[flowVars.validationUrl] Policy {{ policyId }}" level="INFO"/> 
        
        <mule:set-variable variableName="allowNonRamlApplication" value="#[new java.lang.Boolean({{ allowNonRamlApplication }})]" />
        <mule:logger message="allowNonRamlApplication value: #[flowVars.allowNonRamlApplication]" level="INFO"/> 
        <mule:set-variable variableName="flag" value="#['{{ clientId }}'!='']" />
        
        <mule:set-variable variableName="scopeFromYamlConf" value="{{ scope }}" />
        <mule:set-variable variableName="scopeflag" value="#['{{ scope }}'!='']" />
        
        <mule:logger message="clientId #[flowVars.clientId] scope #[flowVars.scope]" level="INFO"/> 
         <scripting:component>
          <scripting:script engine="groovy"><![CDATA[
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.json.JSONObject;
import org.mule.api.MuleContext;
import org.mule.api.MuleEventContext;
import org.mule.api.MuleMessage;
import org.mule.api.lifecycle.Callable;
import org.mule.api.registry.RegistrationException;
import org.mule.api.transport.PropertyScope;
import org.mule.module.apikit.AbstractConfiguration;
import org.raml.v2.api.RamlModelBuilder;
import org.raml.v2.api.RamlModelResult;
import org.raml.v2.api.model.common.ValidationResult;
import org.raml.v2.api.model.v10.api.Api;
import org.raml.v2.api.model.v10.datamodel.TypeInstance;
import org.raml.v2.api.model.v10.datamodel.TypeInstanceProperty;
import org.raml.v2.api.model.v10.methods.Method;
import org.raml.v2.api.model.v10.resources.Resource;
import org.raml.v2.api.model.v10.security.SecurityScheme;
import org.raml.v2.api.model.v10.security.SecuritySchemeRef;
import org.apache.http.HttpResponse;
import org.apache.http.ParseException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import com.sun.mail.handlers.message_rfc822;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.http.ParseException;
import java.io.IOException;

public class RamlParser implements Callable {
	private static final Logger log = LogManager.getLogger(RamlParser.class);
	MuleContext mContext;
	boolean exitValue=false;
	@Override
	public Object onCall(MuleEventContext eventContext) throws Exception {
		mContext = eventContext.getMuleContext();
		MuleMessage message = eventContext.getMessage();
		return onCall(message, mContext);
	}

	public Object onCall(MuleMessage message, MuleContext mContext) throws Exception {
		boolean isValid = callOauthService(message, mContext);
		/* message.setProperty("isValid", isValid, PropertyScope.INVOCATION); */
		return message;

	}

	public boolean callAouthHttp(MuleMessage message, List scopeListFromRaml) {
		boolean isValid = false;
		try {
			String error = null;
			String error_desc = null;
			String access_token = message.getProperty("access_token", PropertyScope.INBOUND);
			String Authorization = message.getProperty("Authorization", PropertyScope.INBOUND);
			Map<String, String> queryParams = message.getProperty("http.query.params", PropertyScope.INBOUND);
			String token = queryParams.get("access_token");

			String validationUrl = message.getProperty("validationUrl", PropertyScope.INVOCATION);

			HttpClient httpclient = HttpClientBuilder.create().build();
			HttpGet httpGet = new HttpGet(validationUrl);
			int responseCode;

			// Check the conditions of access_token
			if (access_token != null && Authorization == null && token == null) {
				httpGet.addHeader("Authorization", "Bearer " + access_token);
			} else if (access_token == null && Authorization != null && token == null) {
				if (Authorization.contains("Bearer ")) {
					httpGet.addHeader("Authorization", Authorization);

				} else {
					String getTokenAfterBasic = Authorization.substring(Authorization.lastIndexOf(" ") + 1);
					responseCode = 400;
					error = "Invalid access token: " + getTokenAfterBasic+ " (org.mule.modules.oauth2.provider.token.InvalidAccessTokenException).";
					error_desc = "The access token provided is expired, revoked, malformed, or invalid. Check if the Authorization header contains the token of Bearer type";
					isValid = false;
					message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
					message.setProperty("error", error, PropertyScope.INVOCATION);
					message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);
					message.setProperty("status_code", responseCode, PropertyScope.INVOCATION);
				}
			} else if (access_token != null && Authorization != null && token == null) {
				responseCode = 400;
				error = "Either provide an 'access_token' query parameter or an 'Authorization' header.";
				error_desc = "The access token has been provided both, as a query param, and as an Authorization header.";
				isValid = false;
				message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
				message.setProperty("error", error, PropertyScope.INVOCATION);
				message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);
				message.setProperty("status_code", responseCode, PropertyScope.INVOCATION);
			} else if (access_token != null && Authorization != null && token != null) {
				responseCode = 400;
				error = "Either provide an 'access_token' query parameter or an 'Authorization' header.";
				error_desc = "The access token has been provided both, as a query param, and as an Authorization header.";
				isValid = false;
				message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
				message.setProperty("error", error, PropertyScope.INVOCATION);
				message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);
				message.setProperty("status_code", responseCode, PropertyScope.INVOCATION);
			} else if (access_token == null && Authorization == null && token == null) {
				responseCode = 400;
				error = "Bad request. No token was provided";
				error_desc = "The required parameter access_token is missing.";
				isValid = false;
				message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
				message.setProperty("error", error, PropertyScope.INVOCATION);
				message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);
				message.setProperty("status_code", responseCode, PropertyScope.INVOCATION);
			} else if (access_token == null && Authorization == null && token != null) {
				httpGet.addHeader("Authorization", "Bearer " + token);
			} else if (access_token != null && Authorization == null && token != null) {
				httpGet.addHeader("Authorization", "Bearer " + access_token);
			} else if (access_token == null && Authorization != null && token != null) {
				if (Authorization.contains("Bearer ")) {
					httpGet.addHeader("Authorization", Authorization);

				} else {
					String getTokenAfterBasic = Authorization.substring(Authorization.lastIndexOf(" ") + 1);
					responseCode = 400;
					error = "Invalid access token: " + getTokenAfterBasic+ " (org.mule.modules.oauth2.provider.token.InvalidAccessTokenException).";
					error_desc = "The access token provided is expired, revoked, malformed, or invalid. Check if the Authorization header contains the token of Bearer type";
					isValid = false;
					message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
					message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);
					message.setProperty("error", error, PropertyScope.INVOCATION);
					message.setProperty("status_code", responseCode, PropertyScope.INVOCATION);
				}
			}

			// Call validate service
			HttpResponse response = httpclient.execute(httpGet);
			responseCode = response.getStatusLine().getStatusCode();
			log.info("responseCode " + responseCode);
			log.info("response " + response.toString());

			// isValid = ValidateResponse(message, isValid, error, error_desc,
			// responseCode, response);

			isValid = ValidateResponse(message, isValid, error, error_desc, responseCode, response, scopeListFromRaml);
			log.info("************ " + isValid);

		}

		catch (IOException | ParseException ex) {
			ex.printStackTrace();
		}
		return isValid;
	}

	private boolean ValidateResponse(MuleMessage message, boolean isValid, String error, String error_desc,
			int responseCode, HttpResponse response, List scopeListFromRaml) throws IOException {
		if (responseCode == 200) {
			String stringResponse = EntityUtils.toString(response.getEntity());
			log.info(stringResponse);

			JSONObject obj = new JSONObject(stringResponse);
			String client_id = obj.getString("client_id");
			String username = obj.getString("username");
			String scope = obj.getString("scope");
			int expires_in = obj.getInt("expires_in");
			message.setProperty("client_id", client_id, PropertyScope.OUTBOUND);
			message.setProperty("username", username, PropertyScope.OUTBOUND);
			message.setProperty("scope", scope, PropertyScope.OUTBOUND);

			boolean flag = message.getProperty("flag", PropertyScope.INVOCATION);
			log.info("flag value " + flag);

			boolean scopeflag = message.getProperty("scopeflag", PropertyScope.INVOCATION);
			log.info("scope flag value " + scopeflag);

			////////////////////////////////////////////////////////////////////////////////
			// Check if client_id and scope is configured in policy or left
			//////////////////////////////////////////////////////////////////////////////// blank
			if (flag != false && scopeflag == false) {
				log.info("Client restriction implemented && scope not implemented");
				String clientId = message.getProperty("clientId", PropertyScope.INVOCATION);
				// ******** only client_id present

				// Get the client_id from policy settings and split based on the
				// spaces
				String[] splittedClientId = clientId.split("\\s+");
				List<String> clientIdList = new ArrayList<String>();
				for (int i = 0; i < splittedClientId.length; i++) {
					clientIdList.add(splittedClientId[i].trim());
				}
				// Add the list of client_id

				// Check if the client_id registered with the policy atches with
				// actual on the token
				if (clientIdList.contains(client_id.trim())) {
					isValid = true;
					message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
					message.setProperty("status_code", responseCode, PropertyScope.INVOCATION);
				} else {
					isValid = false;
					message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
					error = "Invalid client or the client does not have the access to this API";
					message.setProperty("error", error, PropertyScope.INVOCATION);
					message.setProperty("error_desc", "Wrong client_id provided", PropertyScope.INVOCATION);
					message.setProperty("status_code", 401, PropertyScope.INVOCATION);
				}
			} else if (flag == false && scopeflag == false) {
				log.info("Client restriction not implemented && scope not implemented");
				// ******** only client_id and scope both are not present
				isValid = true;
				message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
				message.setProperty("status_code", responseCode, PropertyScope.INVOCATION);
			}
			if (flag == false && scopeflag != false) {
				log.info("Client restriction not implemented && scope implemented");

				// ******** only client_id not present and scope present

				// Get the scope from policy settings and split based on the
				// spaces

				List<String> scopeList = scopeListFromRaml;

				// Add the list of scope

				log.info(scopeList.toString());

				//////////////////////////////////////////////////////////////////////////////

				String[] splittedscope = scope.split("\\s+");
				List<String> scList = new ArrayList<String>();

				for (int i = 0; i < splittedscope.length; i++) {
					scList.add(splittedscope[i].trim());
				}

				scopeList.removeAll(scList);

				///////////////////////////////////////////////////////////////////////

				if (scopeList.isEmpty()) {
					isValid = true;
					message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
					message.setProperty("status_code", responseCode, PropertyScope.INVOCATION);
				} else {
					isValid = false;
					message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
					error = "Invalid scope or the scope is not authorized to access the API";
					error_desc = "The scope is not registered and authorized to access the API. Wrong scope provided: " + scList.toString()+ " Missing: "+ scopeList.toString();
					message.setProperty("error", error, PropertyScope.INVOCATION);
					message.setProperty("status_code", 401, PropertyScope.INVOCATION);
					message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);
				}

			}

			if (flag != false && scopeflag != false) {
				log.info("Client restriction implemented && scope implemented");

				// ******** only client_id not present and scope present

				// Get the scope from policy settings and split based on the
				// spaces

				List<String> scopeList = scopeListFromRaml;

				// Add the list of scope

				log.info(scopeList.toString());

				//////////////////////////////////////////////////////////////////////////////

				String[] splittedscope = scope.split("\\s+");
				List<String> scList = new ArrayList<String>();

				for (int i = 0; i < splittedscope.length; i++) {
					scList.add(splittedscope[i].trim());
				}

				scopeList.removeAll(scList);
				////////////////////////////////////////

				String clientId = message.getProperty("clientId", PropertyScope.INVOCATION);

				// Get the client_id from policy settings and split based on the
				// spaces
				String[] splittedClientId = clientId.split("\\s+");
				List<String> clientIdList = new ArrayList<String>();
				for (int i = 0; i < splittedClientId.length; i++) {
					clientIdList.add(splittedClientId[i].trim());
				}

				if (scopeList.isEmpty() && clientIdList.contains(client_id.trim())) {
					// ******** both are valid
					isValid = true;
					message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
					message.setProperty("status_code", responseCode, PropertyScope.INVOCATION);
				} else if (!(scopeList.isEmpty()) && clientIdList.contains(client_id.trim())) {
					// ******** only client_id valid
					isValid = false;
					message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
					error = "Invalid scope or the scope is not authorized to access the API";
					error_desc = "The scope is not registered and authorized to access the API. Wrong scope provided: " + scList.toString()+ " Missing: "+ scopeList.toString();
					message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);
					message.setProperty("error", error, PropertyScope.INVOCATION);
					message.setProperty("status_code", 401, PropertyScope.INVOCATION);
				} else if (scopeList.isEmpty() && !(clientIdList.contains(client_id.trim()))) {
					// ******** only scope valid
					isValid = false;
					message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
					error = "Invalid client or the client does not have the access to this API";
					error_desc = "Wrong client_id provided";
					message.setProperty("error", error, PropertyScope.INVOCATION);
					message.setProperty("status_code", 401, PropertyScope.INVOCATION);
					message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);
				} else if (!(scopeList.isEmpty()) && !(clientIdList.contains(client_id.trim()))) {
					// Both are not valid
					isValid = false;
					message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
					error = "Invalid client and Invalid scope";
					error_desc = "The client_id and scope provided are not registered and authorized to access the API. Wrong scope provided: "+scList.toString()+ " Missing: "+ scopeList.toString();
					message.setProperty("error", error, PropertyScope.INVOCATION);
					message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);
					message.setProperty("status_code", 401, PropertyScope.INVOCATION);
				}
			}

		}

		else if (responseCode == 500) {
			String stringResponse = EntityUtils.toString(response.getEntity());
			log.info(stringResponse);
			isValid = false;
			message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
			error = stringResponse;
			message.setProperty("error", error, PropertyScope.INVOCATION);
			message.setProperty("status_code", responseCode, PropertyScope.INVOCATION);
			message.setProperty("error_desc", "The access token provided is expired, revoked, malformed, or invalid.",PropertyScope.INVOCATION);
		} else if (responseCode == 401) {
			String stringResponse = EntityUtils.toString(response.getEntity());
			log.info(stringResponse);
			isValid = false;
			message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
			error = stringResponse;
			message.setProperty("error", error, PropertyScope.INVOCATION);
			message.setProperty("status_code", responseCode, PropertyScope.INVOCATION);
			message.setProperty("error_desc", "The access token provided is expired, revoked, malformed, or invalid.",PropertyScope.INVOCATION);
		} else if (responseCode == 403) {
			String stringResponse = EntityUtils.toString(response.getEntity());
			log.info(stringResponse);
			isValid = false;
			error = stringResponse;
			message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
			message.setProperty("status_code", responseCode, PropertyScope.INVOCATION);
			message.setProperty("error_desc", "The access token provided is expired, revoked, malformed, or invalid.",PropertyScope.INVOCATION);
		} else if (responseCode == 400) {
			String stringResponse = EntityUtils.toString(response.getEntity());
			log.info(stringResponse);
			isValid = false;
			message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
			message.setProperty("error", error, PropertyScope.INVOCATION);
			message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);
			message.setProperty("status_code", responseCode, PropertyScope.INVOCATION);
		}
		return isValid;
	}

	public boolean callOauthService(MuleMessage message, MuleContext mContext) throws RegistrationException, Exception {
		boolean isValid = false;
		boolean allowNonRamlApplication=false;
		allowNonRamlApplication=message.getProperty("allowNonRamlApplication", PropertyScope.INVOCATION);
		HashMap scopeMap = new HashMap();
		String[] reqUriList = ((String) message.getInboundProperty("http.request.path")).split("/");
		String resourceName="";
		try{
			resourceName = reqUriList[reqUriList.length - 1];
		}catch(java.lang.ArrayIndexOutOfBoundsException e)
		{
			message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
			String error = "Resource not found";
			String error_desc = "Cannot find valid path from url after baseUri";
			message.setProperty("error", error, PropertyScope.INVOCATION);
			message.setProperty("status_code", 500, PropertyScope.INVOCATION);
			message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);
			return isValid;
		}
				
		String reqMethod = message.getInboundProperty("http.method");
		log.info("Request Method " + reqMethod);
		String resourceAndVerb = "/" + resourceName + "-" + reqMethod.toLowerCase();
		List scopeListFromRaml;
		if (isResourceOauthProtected(resourceAndVerb, mContext, message)) {
			log.info("---------- Resource is Oauth protected. /securedBy: [oauth_2_0]");
			scopeMap = getScopesFromRAML(mContext,message);
			log.info("scopeMap from RAML " + scopeMap);

			scopeListFromRaml = (List) scopeMap.get(resourceAndVerb);
			log.info("Current Scopes: " + scopeListFromRaml.toString());
			if (scopeListFromRaml == null || scopeListFromRaml.size() == 0) {
				log.info(resourceAndVerb + " Resource not protected by scope");
				message.setProperty("scopeflag", false, PropertyScope.INVOCATION);

				isValid = callAouthHttp(message, scopeListFromRaml);
				log.info("Scope is not present. Only validate the token " + isValid);
			} else {
				log.info(resourceAndVerb + " Resource protected by scope");
				message.setProperty("scopeflag", true, PropertyScope.INVOCATION);
				isValid = callAouthHttp(message, scopeListFromRaml);
				log.info("Scope is present. Validate scope and token " + isValid);
			}
		} else {
			log.info("Resource is not protected by Oauth. Checking whether API is oauth protected ...");
			if (isApiOauthProtected(mContext, message)) {
				log.info("Application have RAML specification, but resource is not secured by 'securedBy'");
				//Since the resource is not protected by Oauth and we still want to go, check the scope, if scope is there in config, take that or else execute without scope
				//This works for a NonRAML flow inside a RAML based application
				String error = "Resource is not protected by Oauth or RAML is not present";
				String error_desc = "RAML configuration may not be present in Application. If present, then resource is not secured by '[securedBy]'";
				isValid = allowNonRAMLApplicationWithThisPolicy(message, allowNonRamlApplication,error,error_desc);
    			return isValid;
			} else {
				
				if (exitValue==true)
				{
				    //This works for pure NonRAML application				
					String error = "RAML is not present and resource is not protected by Oauth";
					String error_desc = "Cannot find RAML configuration in Application. May not be a RAML based application";
					isValid = allowNonRAMLApplicationWithThisPolicy(message, allowNonRamlApplication,error,error_desc);
			        return isValid;
				}
				else{
				// 'OAuth 2.0' specification not present in RAML
						
				log.info("Neither the API nor the resources is protected by Oauth. Please add Oauth specification in RAML " + resourceAndVerb);
				isValid = false;
				message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
				String error = "Neither the API nor the resources is protected by 'OAuth 2.0'.";
				String error_desc = "Cannot find Oauth configuration in RAML. Please modify the your RAML file with oauth_2_0 specification";
				message.setProperty("error", error, PropertyScope.INVOCATION);
				message.setProperty("status_code", 500, PropertyScope.INVOCATION);
				message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);
				return isValid;
							
				}
			}
		}
		return isValid;
	}

	
	private boolean allowNonRAMLApplicationWithThisPolicy(MuleMessage message, boolean allowNonRamlApplication, String error, String error_desc) {
		boolean isValid = false;
		if(allowNonRamlApplication ==true || allowNonRamlApplication)	
		  {
		     //If we want to stop the policy since it is not a RAML application and RAML is not present, we can go with following:
			String scopeValueFormYaml = message.getProperty("scopeFromYamlConf", PropertyScope.INVOCATION);
		   	isValid = isScopePresentInConfig(message, scopeValueFormYaml);
		   	return isValid;			
		  }
		else{
		   	//Else if we still want to go with policy even if RAML not present, do the following:
			isValid = false;
		    message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
		    message.setProperty("error", error, PropertyScope.INVOCATION);
		    message.setProperty("status_code", 500, PropertyScope.INVOCATION);
		    message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);
		    return isValid;
		   }
		
	}
	
	private boolean isScopePresentInConfig(MuleMessage message, String scopeValueFormYaml) {
		boolean isValid;
		List scopeListFromRaml;
		if (scopeValueFormYaml != "") {
			// Scope is present
			log.info("Scope is present in Config ");
			message.setProperty("scopeflag", true, PropertyScope.INVOCATION);
			String[] scopeValueFormYamlSplitted = scopeValueFormYaml.split("\\s+");

			scopeListFromRaml = new ArrayList<String>();

			for (int i = 0; i < scopeValueFormYamlSplitted.length; i++) {
				scopeListFromRaml.add(scopeValueFormYamlSplitted[i].trim());
			}

			isValid = callAouthHttp(message, scopeListFromRaml);

		} else {
			// Scope not present
			log.info("Scope is not present in RAML ");
			message.setProperty("scopeflag", false, PropertyScope.INVOCATION);
			isValid = callAouthHttp(message, null);
		}
		return isValid;
	}
	
	private boolean isApiOauthProtected(MuleContext mContext, MuleMessage message) throws Exception {
		boolean rootLevelProtection = false;
		boolean isValid = false;

		AbstractConfiguration ac = mContext.getRegistry().lookupObject(AbstractConfiguration.class);

		RamlModelResult ramlModelResult = null;
		try {
			ramlModelResult = new RamlModelBuilder().buildApi(ac.getRaml());
		} catch (java.lang.NullPointerException e) {
			log.info("Cannot find RAML configuration in Application ");
			isValid = false;
			exitValue=true;
			/*message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
			String error = "Resource is not protected by Oauth";
			String error_desc = "Cannot find RAML configuration in Application";
			message.setProperty("error", error, PropertyScope.INVOCATION);
			message.setProperty("status_code", 500, PropertyScope.INVOCATION);
			message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);*/
			return rootLevelProtection;
		}

		String ramlError = "";
		if (ramlModelResult.hasErrors()) {
			log.info("RAML has error!");
			for (ValidationResult validationResult : ramlModelResult.getValidationResults()) {
				log.info("Validation error message " + validationResult.getMessage());
				ramlError += validationResult.getMessage() + "-";
			}
			throw new Exception("Invalid RAML. Please check your RAML" + ramlError);
		} else {

			Api api = ramlModelResult.getApiV10();
			List<SecurityScheme> l = api.securitySchemes();
			for (Iterator iterator = l.iterator(); iterator.hasNext();) {
				SecurityScheme sss = (SecurityScheme) iterator.next();
				log.info("List of security schemes are " + sss.name() + "---" + sss.displayName().value() + " --- "	+ sss.type());
				if (sss.name().equals("oauth_2_0")) {
					rootLevelProtection = true;
					log.info("API is Oauth protect protected");
				}

			}
		}

		/* log.info("API is Oauth protect protected"); */
		return rootLevelProtection;
	}

	private HashMap getScopesFromRAML(MuleContext mContext, MuleMessage message) throws Exception {
        boolean isValid=false;
		HashMap scopeMap = new HashMap();
		AbstractConfiguration ac = mContext.getRegistry().lookupObject(AbstractConfiguration.class);
		RamlModelResult ramlModelResult = null;
		try {
			ramlModelResult = new RamlModelBuilder().buildApi(ac.getRaml());
		} catch (java.lang.NullPointerException e) {
			log.info("Cannot find RAML configuration in Application ");
			isValid = false;
			exitValue=true;
			message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
			String error = "Resource is not protected by Oauth";
			String error_desc = "Cannot find RAML configuration in Application";
			message.setProperty("error", error, PropertyScope.INVOCATION);
			message.setProperty("status_code", 500, PropertyScope.INVOCATION);
			message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);
		
		}

		String ramlError = "";
		if (ramlModelResult.hasErrors()) {
			log.info("RAML has error!");
			for (ValidationResult validationResult : ramlModelResult.getValidationResults()) {
				log.info("Validation error message " + validationResult.getMessage());
				ramlError += validationResult.getMessage() + "-";
			}
			throw new Exception("Invalid RAML. Please check your RAML" + ramlError);
		} else {

			Api api = ramlModelResult.getApiV10();

			List<Resource> resList = api.resources();
			log.info("Number of resources " + resList.size());

			for (Iterator iterator = resList.iterator(); iterator.hasNext();) {
				Resource resource = (Resource) iterator.next();

				List<Method> method = resource.methods();
				log.info("Number of methods in each resources " + resource.resourcePath() + " :" + method.size());

				for (Iterator iterator1 = method.iterator(); iterator1.hasNext();) {
					Method m = (Method) iterator1.next();
					log.info("Method type " + m.method().toUpperCase());

					List scopeForThisMethod = new LinkedList();

					List<SecuritySchemeRef> secByList = m.securedBy();
					log.info(resource.resourcePath() + ":" + m.method() + " Secured by " + secByList.size()	+ " Security Scheme");

					for (Iterator ite2 = secByList.iterator(); ite2.hasNext();) {
						SecuritySchemeRef securitySchemeRef = (SecuritySchemeRef) ite2.next();
						SecurityScheme securityScheme = securitySchemeRef.securityScheme();
						log.info("Security scheme name " + securityScheme.name());

						if (securityScheme.name().equals("oauth_2_0")) {

							TypeInstance ti = securitySchemeRef.structuredValue();

							if (ti != null) {
								log.info(" Type instance is " + ti);
								List<TypeInstanceProperty> typeInstancePropertyList = ti.properties();

								for (Iterator iterator2 = typeInstancePropertyList.iterator(); iterator2.hasNext();) {
									TypeInstanceProperty typeInstanceProperty = (TypeInstanceProperty) iterator2.next();

									log.info("Type instance name " + typeInstanceProperty.name());
									List tylist = typeInstanceProperty.values();

									if (tylist != null && tylist.size() > 0) {
										log.info("Number of scopes " + typeInstanceProperty.values().size());
									}

									for (Iterator iterator3 = tylist.iterator(); iterator3.hasNext();) {
										TypeInstance object = (TypeInstance) iterator3.next();
										String scopes = object.value().toString();
										log.info(" inner type instance value " + scopes);
										String[] scopeList = scopes.trim().split(" ");
										for (int i = 0; i < scopeList.length; i++) {
											scopeForThisMethod.add(scopeList[i]);
										}
									}

								}
							}

						}

					}

					scopeMap.put(resource.resourcePath() + "-" + m.method(), scopeForThisMethod);
				}
			}
		}

		log.info("Scope map will follow");

		Set scopeKeys = scopeMap.keySet();
		for (Iterator iterator = scopeKeys.iterator(); iterator.hasNext();) {
			String key = (String) iterator.next();
			log.info(key + " - " + scopeMap.get(key));
		}

		return scopeMap;

	}

	private boolean isResourceOauthProtected(String resourceVerb, MuleContext mContext, MuleMessage message)throws RegistrationException, NullPointerException, Exception {
		boolean isResourceOauthProtected = false;
		boolean isValid;
		AbstractConfiguration ac = mContext.getRegistry().lookupObject(AbstractConfiguration.class);

		RamlModelResult ramlModelResult = null;
		try {
			ramlModelResult = new RamlModelBuilder().buildApi(ac.getRaml());
		} catch (java.lang.NullPointerException e) {
			log.info("Cannot find RAML configuration in Application ");
			isValid = false;
			exitValue=true;
			/*message.setProperty("isValid", isValid, PropertyScope.INVOCATION);
			String error = "Resource is not protected by Oauth";
			String error_desc = "Cannot find RAML configuration in Application";
			message.setProperty("error", error, PropertyScope.INVOCATION);
			message.setProperty("status_code", 500, PropertyScope.INVOCATION);
			message.setProperty("error_desc", error_desc, PropertyScope.INVOCATION);*/
			return isResourceOauthProtected;
		}

		String ramlError = "";
		if (ramlModelResult.hasErrors()) {
			log.info("RAML has error!");
			for (ValidationResult validationResult : ramlModelResult.getValidationResults()) {
				log.info("Validation error message " + validationResult.getMessage());
				ramlError += validationResult.getMessage() + "-";
			}
			throw new Exception("Invalid RAML. Please check your RAML" + ramlError);
		} else {

			Api api = ramlModelResult.getApiV10();
            log.info("RAML configuration present in Application ");
			log.info("API: " + api.toString() + " Title" + api.title().value() + " RAML version" + api.ramlVersion());
			log.info("\nVersion: " + api.version().value() + " Base uri " + api.baseUri().value().toString() + "\n");

			List<Resource> resList = api.resources();
			log.info("Number of resources " + resList.size());

			for (Iterator iterator = resList.iterator(); iterator.hasNext();) {
				Resource resource = (Resource) iterator.next();

				List<Method> method = resource.methods();
				log.info("Number of methods in resource " + resource.resourcePath() + " :" + method.size());

				for (Iterator iterator1 = method.iterator(); iterator1.hasNext();) {
					Method m = (Method) iterator1.next();
					log.info("Method type " + m.method().toUpperCase());

					// Check queryParam:
					if (!(m.queryParameters().isEmpty())) {
						for (int i = 0; i < m.queryParameters().size(); i++) {
							log.info("queryParameters " + m.queryParameters().get(i).name() + " default value "	+ m.queryParameters().get(i).displayName().value());
						}
					}

					// Check Headers:
					if (!(m.headers().isEmpty())) {
						for (int i = 0; i < m.headers().size(); i++) {
							log.info("headers " + m.headers().get(i).name() + " default value "	+ m.headers().get(i).displayName().value());
						}
					}

					String resourceAndVerbFromRequest = resource.resourcePath() + "-" + m.method();

					if (resourceAndVerbFromRequest.equals(resourceVerb)) {
						List<SecuritySchemeRef> secByList = m.securedBy();

						log.info(resource.resourcePath() + ":" + m.method() + " Secured by " + secByList.size()	+ " Security Scheme");

						for (Iterator ite2 = secByList.iterator(); ite2.hasNext();) {
							SecuritySchemeRef securitySchemeRef = (SecuritySchemeRef) ite2.next();
							SecurityScheme securityScheme = securitySchemeRef.securityScheme();
							log.info("Security scheme name " + securityScheme.name());

							if (securityScheme.name().equals("oauth_2_0")) {
								isResourceOauthProtected = true;

							}

						}
					}

				}
			}
			return isResourceOauthProtected;
		}

	}
}

new RamlParser().onCall(message,muleContext);
              ]]>
          </scripting:script>
      </scripting:component>
        
      <mule:logger message="Hit actual API: #[isValid]" level="INFO"/>  
        
        <mule:message-filter onUnaccepted="policyViolation">
            <mule:expression-filter expression="#[flowVars.isValid == true]" />
        </mule:message-filter>  
        <mule:remove-variable variableName="access_token" />
        <mule:remove-variable variableName="clientId" />
        <mule:remove-variable variableName="scopeFromYamlConf" />
		<mule:remove-variable variableName="allowNonRamlApplication" />
    </before>

    <!--
        The after is inserted after your API flows. With this tag you can
        manipulate the API response.
        Note that if the API flow is halted (ie. by a filter) the after
        tag will not run. In this example, the after tag is not executed
        when the message is filtered.
    -->
    <after>
        <mule:set-property propertyName="Custom-Header" value="Example Policy" />
        
    </after>

    <mule:processor-chain name="policyViolation">
        <mule:logger message="The custom policy filtered the message " level="DEBUG" />
        <mule:set-property propertyName="http.status" value="#[flowVars.status_code]"/>
        <mule:set-property propertyName="Content-Type" value="application/json"/>
        <mule:set-payload value='{ "error" : "#[flowVars.error.toString()]","error description" : "#[flowVars.error_desc.toString()]"}'/>
    </mule:processor-chain>
    
    <!-- Pointcuts specify methods (GET/POST) where this policy takes effect-->
    {{#pointcutData.length}}
      {{#pointcutData}}
        <pointcut>
          <api-platform-gw:api-pointcut apiName="{{apiName}}" apiVersion="{{apiVersionName}}"/>
          <resource methodRegex="{{methodRegex}}" uriTemplateRegex="{{uriTemplateRegex}}"/>
        </pointcut>
      {{/pointcutData}}
    {{/pointcutData.length}}
    {{^pointcutData.length}}
      <pointcut>
          <api-platform-gw:api-pointcut apiName="{{ apiName }}" apiVersion="{{ apiVersionName }}"/>
      </pointcut>
    {{/pointcutData.length}}
    
  
    
</policy>